plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
    id 'com.vanniktech.maven.publish'
}

ext {
    PUBLISH_GROUP_ID = 'io.github.RhymezxCode'
    PUBLISH_VERSION = '1.0.0'
    PUBLISH_ARTIFACT_ID = 'NetworkStateObserver'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
//            release(MavenPublication) {
//                groupId = 'com.github.RhymezxCode'
//                artifactId = 'NetworkStateObserver'
//                version = '1.0.0'
//                // Two artifacts, the `aar` (or `jar`) and the sources
//                from components.release
//                artifact androidSourcesJar
//            }
            mavenRelease(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                from components.release
                artifact androidSourcesJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'NetworkStateObserver Android Library'
                    url = 'https://github.com/RhymezxCode/NetworkStateObserver'
                    licenses {
                        license {
                            name = 'NetworkStateObserver License'
                            url = 'https://github.com/RhymezxCode/NetworkStateObserver/blob/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'RhymezxCode'
                            name = 'Babajide Samuel Awodire'
                            email = 'rhymezx.code@gmail.com'
                        }
                        // Add all other devs here...
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = 'scm:git:github.com/RhymezxCode/NetworkStateObserver.git'
                        developerConnection = 'scm:git:ssh://github.com/RhymezxCode/NetworkStateObserver.git'
                        url = 'https://github.com/RhymezxCode/NetworkStateObserver/tree/main'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.secretKeyRingFile"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}

android {
    namespace 'io.github.rhymezxcode.networkstateobserver'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    publishing {
        publishing {
            singleVariant("release") {
                withSourcesJar()
                withJavadocJar()
            }

        }
    }

}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-livedata-core-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
}









